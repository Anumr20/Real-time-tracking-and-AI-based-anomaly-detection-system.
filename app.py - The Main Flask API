from flask import Flask, request, jsonify
from datetime import datetime
from models import db, User, Location, Alert, Route
from tasks import check_for_anomalies
from config import Config

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    db.init_app(app)
    return app

app = create_app()

@app.route('/location', methods=['POST'])
def update_location():
    """
    Receives location updates from a device.
    Saves the location and triggers a background task for anomaly detection.
    """
    data = request.get_json()
    if not data or not all(k in data for k in ['user_id', 'latitude', 'longitude']):
        return jsonify({'error': 'Missing required fields'}), 400

    user_id = data['user_id']
    lat = data['latitude']
    lon = data['longitude']

    # Create a GEOGRAPHY point for PostGIS
    point = f'POINT({lon} {lat})'

    new_location = Location(
        user_id=user_id,
        coordinates=point,
        timestamp=datetime.now(datetime.timezone.utc)
    )
    db.session.add(new_location)
    db.session.commit()

    # Prepare data for the background task
    location_data = {
        'id': new_location.id,
        'latitude': lat,
        'longitude': lon,
        'timestamp': new_location.timestamp.isoformat()
    }

    # Offload anomaly detection to the background worker
    check_for_anomalies.delay(user_id, location_data)

    return jsonify({'message': 'Location received successfully'}), 201

@app.route('/alerts/<int:user_id>', methods=['GET'])
def get_alerts(user_id):
    """
    API endpoint for family/law enforcement to retrieve alerts for a user.
    """
    alerts = Alert.query.filter_by(user_id=user_id).order_by(Alert.created_at.desc()).all()
    return jsonify([{
        'id': alert.id,
        'type': alert.alert_type,
        'details': alert.details,
        'timestamp': alert.created_at.isoformat()
    } for alert in alerts])

if __name__ == '__main__':
    app.run(debug=True)
